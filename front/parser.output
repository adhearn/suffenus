Terminals unused in grammar

   UNOP
   NEWLINE
   COMMA


Grammar

    0 $accept: program $end

    1 program: declaration_list function_list

    2 declaration_list: declaration
    3                 | declaration_list declaration

    4 declaration: type ID SEMI

    5 function_list: function
    6              | function_list function

    7 function: type ID LPAREN RPAREN LBRACE declaration_list statement_list RBRACE

    8 statement_list: statement
    9               | statement_list statement

   10 statement: assignment SEMI
   11          | RETURN expr SEMI

   12 assignment: ID EQUALS expr

   13 expr: expr BINOP expr
   14     | expr RELOP expr
   15     | ID
   16     | INTEGER

   17 type: ID


Terminals, with rules where they appear

$end (0) 0
error (256)
RELOP <op> (258) 14
UNOP <op> (259)
BINOP <op> (260) 13
ID <str> (261) 4 7 12 15 17
INTEGER <integer> (262) 16
SEMI (263) 4 10 11
NEWLINE (264)
LPAREN (265) 7
RPAREN (266) 7
LBRACE (267) 7
RBRACE (268) 7
RETURN (269) 11
COMMA (270)
EQUALS (271) 12


Nonterminals, with rules where they appear

$accept (17)
    on left: 0
program <program> (18)
    on left: 1, on right: 0
declaration_list <list> (19)
    on left: 2 3, on right: 1 3 7
declaration <declaration> (20)
    on left: 4, on right: 2 3
function_list <list> (21)
    on left: 5 6, on right: 1 6
function <function> (22)
    on left: 7, on right: 5 6
statement_list <list> (23)
    on left: 8 9, on right: 7 9
statement <statement> (24)
    on left: 10 11, on right: 8 9
assignment <assignment> (25)
    on left: 12, on right: 10
expr <expr> (26)
    on left: 13 14 15 16, on right: 11 12 13 14
type <type> (27)
    on left: 17, on right: 4 7


State 0

    0 $accept: . program $end

    ID  shift, and go to state 1

    program           go to state 2
    declaration_list  go to state 3
    declaration       go to state 4
    type              go to state 5


State 1

   17 type: ID .

    $default  reduce using rule 17 (type)


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: declaration_list . function_list
    3 declaration_list: declaration_list . declaration

    ID  shift, and go to state 1

    declaration    go to state 7
    function_list  go to state 8
    function       go to state 9
    type           go to state 10


State 4

    2 declaration_list: declaration .

    $default  reduce using rule 2 (declaration_list)


State 5

    4 declaration: type . ID SEMI

    ID  shift, and go to state 11


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 declaration_list: declaration_list declaration .

    $default  reduce using rule 3 (declaration_list)


State 8

    1 program: declaration_list function_list .
    6 function_list: function_list . function

    ID  shift, and go to state 1

    $default  reduce using rule 1 (program)

    function  go to state 12
    type      go to state 13


State 9

    5 function_list: function .

    $default  reduce using rule 5 (function_list)


State 10

    4 declaration: type . ID SEMI
    7 function: type . ID LPAREN RPAREN LBRACE declaration_list statement_list RBRACE

    ID  shift, and go to state 14


State 11

    4 declaration: type ID . SEMI

    SEMI  shift, and go to state 15


State 12

    6 function_list: function_list function .

    $default  reduce using rule 6 (function_list)


State 13

    7 function: type . ID LPAREN RPAREN LBRACE declaration_list statement_list RBRACE

    ID  shift, and go to state 16


State 14

    4 declaration: type ID . SEMI
    7 function: type ID . LPAREN RPAREN LBRACE declaration_list statement_list RBRACE

    SEMI    shift, and go to state 15
    LPAREN  shift, and go to state 17


State 15

    4 declaration: type ID SEMI .

    $default  reduce using rule 4 (declaration)


State 16

    7 function: type ID . LPAREN RPAREN LBRACE declaration_list statement_list RBRACE

    LPAREN  shift, and go to state 17


State 17

    7 function: type ID LPAREN . RPAREN LBRACE declaration_list statement_list RBRACE

    RPAREN  shift, and go to state 18


State 18

    7 function: type ID LPAREN RPAREN . LBRACE declaration_list statement_list RBRACE

    LBRACE  shift, and go to state 19


State 19

    7 function: type ID LPAREN RPAREN LBRACE . declaration_list statement_list RBRACE

    ID  shift, and go to state 1

    declaration_list  go to state 20
    declaration       go to state 4
    type              go to state 5


State 20

    3 declaration_list: declaration_list . declaration
    7 function: type ID LPAREN RPAREN LBRACE declaration_list . statement_list RBRACE

    ID      shift, and go to state 21
    RETURN  shift, and go to state 22

    declaration     go to state 7
    statement_list  go to state 23
    statement       go to state 24
    assignment      go to state 25
    type            go to state 5


State 21

   12 assignment: ID . EQUALS expr
   17 type: ID .

    EQUALS  shift, and go to state 26

    $default  reduce using rule 17 (type)


State 22

   11 statement: RETURN . expr SEMI

    ID       shift, and go to state 27
    INTEGER  shift, and go to state 28

    expr  go to state 29


State 23

    7 function: type ID LPAREN RPAREN LBRACE declaration_list statement_list . RBRACE
    9 statement_list: statement_list . statement

    ID      shift, and go to state 30
    RBRACE  shift, and go to state 31
    RETURN  shift, and go to state 22

    statement   go to state 32
    assignment  go to state 25


State 24

    8 statement_list: statement .

    $default  reduce using rule 8 (statement_list)


State 25

   10 statement: assignment . SEMI

    SEMI  shift, and go to state 33


State 26

   12 assignment: ID EQUALS . expr

    ID       shift, and go to state 27
    INTEGER  shift, and go to state 28

    expr  go to state 34


State 27

   15 expr: ID .

    $default  reduce using rule 15 (expr)


State 28

   16 expr: INTEGER .

    $default  reduce using rule 16 (expr)


State 29

   11 statement: RETURN expr . SEMI
   13 expr: expr . BINOP expr
   14     | expr . RELOP expr

    RELOP  shift, and go to state 35
    BINOP  shift, and go to state 36
    SEMI   shift, and go to state 37


State 30

   12 assignment: ID . EQUALS expr

    EQUALS  shift, and go to state 26


State 31

    7 function: type ID LPAREN RPAREN LBRACE declaration_list statement_list RBRACE .

    $default  reduce using rule 7 (function)


State 32

    9 statement_list: statement_list statement .

    $default  reduce using rule 9 (statement_list)


State 33

   10 statement: assignment SEMI .

    $default  reduce using rule 10 (statement)


State 34

   12 assignment: ID EQUALS expr .
   13 expr: expr . BINOP expr
   14     | expr . RELOP expr

    RELOP  shift, and go to state 35
    BINOP  shift, and go to state 36

    $default  reduce using rule 12 (assignment)


State 35

   14 expr: expr RELOP . expr

    ID       shift, and go to state 27
    INTEGER  shift, and go to state 28

    expr  go to state 38


State 36

   13 expr: expr BINOP . expr

    ID       shift, and go to state 27
    INTEGER  shift, and go to state 28

    expr  go to state 39


State 37

   11 statement: RETURN expr SEMI .

    $default  reduce using rule 11 (statement)


State 38

   13 expr: expr . BINOP expr
   14     | expr . RELOP expr
   14     | expr RELOP expr .

    BINOP  shift, and go to state 36

    $default  reduce using rule 14 (expr)


State 39

   13 expr: expr . BINOP expr
   13     | expr BINOP expr .
   14     | expr . RELOP expr

    $default  reduce using rule 13 (expr)
