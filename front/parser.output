Terminals unused in grammar

   UNOP
   NEWLINE
   EQUALS


State 41 conflicts: 2 shift/reduce
State 48 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: top_level_block

    2 top_level_block: top_level_block_element
    3                | top_level_block top_level_block_element

    4 top_level_block_element: declaration
    5                        | function

    6 declaration: type ID ';'

    7 block: block block_element
    8      | block_element

    9 block_element: declaration
   10              | statement

   11 function: type ID '(' ')' '{' block '}'

   12 statement: compound_statement
   13          | expr_statement
   14          | jump_statement
   15          | selection_statement

   16 compound_statement: '{' block '}'

   17 expr_statement: expr ';'

   18 jump_statement: RETURN expr ';'

   19 selection_statement: IF '(' expr ')' statement
   20                    | IF '(' expr ')' statement ELSE statement

   21 expr: expr BINOP expr
   22     | expr RELOP expr
   23     | ID
   24     | INTEGER
   25     | ID '=' expr

   26 type: ID


Terminals, with rules where they appear

$end (0) 0
'(' (40) 11 19 20
')' (41) 11 19 20
';' (59) 6 17 18
'=' (61) 25
'{' (123) 11 16
'}' (125) 11 16
error (256)
RELOP <op> (258) 22
UNOP <op> (259)
BINOP <op> (260) 21
ID <str> (261) 6 11 23 25 26
INTEGER <integer> (262) 24
NEWLINE (263)
RETURN (264) 18
IF (265) 19 20
ELSE (266) 20
EQUALS (267)


Nonterminals, with rules where they appear

$accept (19)
    on left: 0
program <program> (20)
    on left: 1, on right: 0
top_level_block <block> (21)
    on left: 2 3, on right: 1 3
top_level_block_element <block_element> (22)
    on left: 4 5, on right: 2 3
declaration <declaration> (23)
    on left: 6, on right: 4 9
block <block> (24)
    on left: 7 8, on right: 7 11 16
block_element <block_element> (25)
    on left: 9 10, on right: 7 8
function <function> (26)
    on left: 11, on right: 5
statement <statement> (27)
    on left: 12 13 14 15, on right: 10 19 20
compound_statement <block> (28)
    on left: 16, on right: 12
expr_statement <expr> (29)
    on left: 17, on right: 13
jump_statement <jump> (30)
    on left: 18, on right: 14
selection_statement <selection> (31)
    on left: 19 20, on right: 15
expr <expr> (32)
    on left: 21 22 23 24 25, on right: 17 18 19 20 21 22 25
type <type> (33)
    on left: 26, on right: 6 11


State 0

    0 $accept: . program $end

    ID  shift, and go to state 1

    program                  go to state 2
    top_level_block          go to state 3
    top_level_block_element  go to state 4
    declaration              go to state 5
    function                 go to state 6
    type                     go to state 7


State 1

   26 type: ID .

    $default  reduce using rule 26 (type)


State 2

    0 $accept: program . $end

    $end  shift, and go to state 8


State 3

    1 program: top_level_block .
    3 top_level_block: top_level_block . top_level_block_element

    ID  shift, and go to state 1

    $default  reduce using rule 1 (program)

    top_level_block_element  go to state 9
    declaration              go to state 5
    function                 go to state 6
    type                     go to state 7


State 4

    2 top_level_block: top_level_block_element .

    $default  reduce using rule 2 (top_level_block)


State 5

    4 top_level_block_element: declaration .

    $default  reduce using rule 4 (top_level_block_element)


State 6

    5 top_level_block_element: function .

    $default  reduce using rule 5 (top_level_block_element)


State 7

    6 declaration: type . ID ';'
   11 function: type . ID '(' ')' '{' block '}'

    ID  shift, and go to state 10


State 8

    0 $accept: program $end .

    $default  accept


State 9

    3 top_level_block: top_level_block top_level_block_element .

    $default  reduce using rule 3 (top_level_block)


State 10

    6 declaration: type ID . ';'
   11 function: type ID . '(' ')' '{' block '}'

    ';'  shift, and go to state 11
    '('  shift, and go to state 12


State 11

    6 declaration: type ID ';' .

    $default  reduce using rule 6 (declaration)


State 12

   11 function: type ID '(' . ')' '{' block '}'

    ')'  shift, and go to state 13


State 13

   11 function: type ID '(' ')' . '{' block '}'

    '{'  shift, and go to state 14


State 14

   11 function: type ID '(' ')' '{' . block '}'

    ID       shift, and go to state 15
    INTEGER  shift, and go to state 16
    RETURN   shift, and go to state 17
    IF       shift, and go to state 18
    '{'      shift, and go to state 19

    declaration          go to state 20
    block                go to state 21
    block_element        go to state 22
    statement            go to state 23
    compound_statement   go to state 24
    expr_statement       go to state 25
    jump_statement       go to state 26
    selection_statement  go to state 27
    expr                 go to state 28
    type                 go to state 29


State 15

   23 expr: ID .
   25     | ID . '=' expr
   26 type: ID .

    '='  shift, and go to state 30

    ID        reduce using rule 26 (type)
    $default  reduce using rule 23 (expr)


State 16

   24 expr: INTEGER .

    $default  reduce using rule 24 (expr)


State 17

   18 jump_statement: RETURN . expr ';'

    ID       shift, and go to state 31
    INTEGER  shift, and go to state 16

    expr  go to state 32


State 18

   19 selection_statement: IF . '(' expr ')' statement
   20                    | IF . '(' expr ')' statement ELSE statement

    '('  shift, and go to state 33


State 19

   16 compound_statement: '{' . block '}'

    ID       shift, and go to state 15
    INTEGER  shift, and go to state 16
    RETURN   shift, and go to state 17
    IF       shift, and go to state 18
    '{'      shift, and go to state 19

    declaration          go to state 20
    block                go to state 34
    block_element        go to state 22
    statement            go to state 23
    compound_statement   go to state 24
    expr_statement       go to state 25
    jump_statement       go to state 26
    selection_statement  go to state 27
    expr                 go to state 28
    type                 go to state 29


State 20

    9 block_element: declaration .

    $default  reduce using rule 9 (block_element)


State 21

    7 block: block . block_element
   11 function: type ID '(' ')' '{' block . '}'

    ID       shift, and go to state 15
    INTEGER  shift, and go to state 16
    RETURN   shift, and go to state 17
    IF       shift, and go to state 18
    '{'      shift, and go to state 19
    '}'      shift, and go to state 35

    declaration          go to state 20
    block_element        go to state 36
    statement            go to state 23
    compound_statement   go to state 24
    expr_statement       go to state 25
    jump_statement       go to state 26
    selection_statement  go to state 27
    expr                 go to state 28
    type                 go to state 29


State 22

    8 block: block_element .

    $default  reduce using rule 8 (block)


State 23

   10 block_element: statement .

    $default  reduce using rule 10 (block_element)


State 24

   12 statement: compound_statement .

    $default  reduce using rule 12 (statement)


State 25

   13 statement: expr_statement .

    $default  reduce using rule 13 (statement)


State 26

   14 statement: jump_statement .

    $default  reduce using rule 14 (statement)


State 27

   15 statement: selection_statement .

    $default  reduce using rule 15 (statement)


State 28

   17 expr_statement: expr . ';'
   21 expr: expr . BINOP expr
   22     | expr . RELOP expr

    RELOP  shift, and go to state 37
    BINOP  shift, and go to state 38
    ';'    shift, and go to state 39


State 29

    6 declaration: type . ID ';'

    ID  shift, and go to state 40


State 30

   25 expr: ID '=' . expr

    ID       shift, and go to state 31
    INTEGER  shift, and go to state 16

    expr  go to state 41


State 31

   23 expr: ID .
   25     | ID . '=' expr

    '='  shift, and go to state 30

    $default  reduce using rule 23 (expr)


State 32

   18 jump_statement: RETURN expr . ';'
   21 expr: expr . BINOP expr
   22     | expr . RELOP expr

    RELOP  shift, and go to state 37
    BINOP  shift, and go to state 38
    ';'    shift, and go to state 42


State 33

   19 selection_statement: IF '(' . expr ')' statement
   20                    | IF '(' . expr ')' statement ELSE statement

    ID       shift, and go to state 31
    INTEGER  shift, and go to state 16

    expr  go to state 43


State 34

    7 block: block . block_element
   16 compound_statement: '{' block . '}'

    ID       shift, and go to state 15
    INTEGER  shift, and go to state 16
    RETURN   shift, and go to state 17
    IF       shift, and go to state 18
    '{'      shift, and go to state 19
    '}'      shift, and go to state 44

    declaration          go to state 20
    block_element        go to state 36
    statement            go to state 23
    compound_statement   go to state 24
    expr_statement       go to state 25
    jump_statement       go to state 26
    selection_statement  go to state 27
    expr                 go to state 28
    type                 go to state 29


State 35

   11 function: type ID '(' ')' '{' block '}' .

    $default  reduce using rule 11 (function)


State 36

    7 block: block block_element .

    $default  reduce using rule 7 (block)


State 37

   22 expr: expr RELOP . expr

    ID       shift, and go to state 31
    INTEGER  shift, and go to state 16

    expr  go to state 45


State 38

   21 expr: expr BINOP . expr

    ID       shift, and go to state 31
    INTEGER  shift, and go to state 16

    expr  go to state 46


State 39

   17 expr_statement: expr ';' .

    $default  reduce using rule 17 (expr_statement)


State 40

    6 declaration: type ID . ';'

    ';'  shift, and go to state 11


State 41

   21 expr: expr . BINOP expr
   22     | expr . RELOP expr
   25     | ID '=' expr .

    RELOP  shift, and go to state 37
    BINOP  shift, and go to state 38

    RELOP     [reduce using rule 25 (expr)]
    BINOP     [reduce using rule 25 (expr)]
    $default  reduce using rule 25 (expr)


State 42

   18 jump_statement: RETURN expr ';' .

    $default  reduce using rule 18 (jump_statement)


State 43

   19 selection_statement: IF '(' expr . ')' statement
   20                    | IF '(' expr . ')' statement ELSE statement
   21 expr: expr . BINOP expr
   22     | expr . RELOP expr

    RELOP  shift, and go to state 37
    BINOP  shift, and go to state 38
    ')'    shift, and go to state 47


State 44

   16 compound_statement: '{' block '}' .

    $default  reduce using rule 16 (compound_statement)


State 45

   21 expr: expr . BINOP expr
   22     | expr . RELOP expr
   22     | expr RELOP expr .

    BINOP  shift, and go to state 38

    $default  reduce using rule 22 (expr)


State 46

   21 expr: expr . BINOP expr
   21     | expr BINOP expr .
   22     | expr . RELOP expr

    $default  reduce using rule 21 (expr)


State 47

   19 selection_statement: IF '(' expr ')' . statement
   20                    | IF '(' expr ')' . statement ELSE statement

    ID       shift, and go to state 31
    INTEGER  shift, and go to state 16
    RETURN   shift, and go to state 17
    IF       shift, and go to state 18
    '{'      shift, and go to state 19

    statement            go to state 48
    compound_statement   go to state 24
    expr_statement       go to state 25
    jump_statement       go to state 26
    selection_statement  go to state 27
    expr                 go to state 28


State 48

   19 selection_statement: IF '(' expr ')' statement .
   20                    | IF '(' expr ')' statement . ELSE statement

    ELSE  shift, and go to state 49

    ELSE      [reduce using rule 19 (selection_statement)]
    $default  reduce using rule 19 (selection_statement)


State 49

   20 selection_statement: IF '(' expr ')' statement ELSE . statement

    ID       shift, and go to state 31
    INTEGER  shift, and go to state 16
    RETURN   shift, and go to state 17
    IF       shift, and go to state 18
    '{'      shift, and go to state 19

    statement            go to state 50
    compound_statement   go to state 24
    expr_statement       go to state 25
    jump_statement       go to state 26
    selection_statement  go to state 27
    expr                 go to state 28


State 50

   20 selection_statement: IF '(' expr ')' statement ELSE statement .

    $default  reduce using rule 20 (selection_statement)
