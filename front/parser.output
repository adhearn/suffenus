Terminals unused in grammar

   UNOP
   NEWLINE
   COMMA


Grammar

    0 $accept: program $end

    1 program: top_level_block

    2 top_level_block: top_level_block_element
    3                | top_level_block top_level_block_element

    4 top_level_block_element: declaration
    5                        | function

    6 declaration: type ID SEMI

    7 block: block block_element
    8      | block_element

    9 block_element: declaration
   10              | statement

   11 function: type ID LPAREN RPAREN LBRACE block RBRACE

   12 statement: assignment SEMI
   13          | RETURN expr SEMI

   14 assignment: ID EQUALS expr

   15 expr: expr BINOP expr
   16     | expr RELOP expr
   17     | ID
   18     | INTEGER

   19 type: ID


Terminals, with rules where they appear

$end (0) 0
error (256)
RELOP <op> (258) 16
UNOP <op> (259)
BINOP <op> (260) 15
ID <str> (261) 6 11 14 17 19
INTEGER <integer> (262) 18
SEMI (263) 6 12 13
NEWLINE (264)
LPAREN (265) 11
RPAREN (266) 11
LBRACE (267) 11
RBRACE (268) 11
RETURN (269) 13
COMMA (270)
EQUALS (271) 14


Nonterminals, with rules where they appear

$accept (17)
    on left: 0
program <program> (18)
    on left: 1, on right: 0
top_level_block <block> (19)
    on left: 2 3, on right: 1 3
top_level_block_element <block_element> (20)
    on left: 4 5, on right: 2 3
declaration <declaration> (21)
    on left: 6, on right: 4 9
block <block> (22)
    on left: 7 8, on right: 7 11
block_element <block_element> (23)
    on left: 9 10, on right: 7 8
function <function> (24)
    on left: 11, on right: 5
statement <statement> (25)
    on left: 12 13, on right: 10
assignment <assignment> (26)
    on left: 14, on right: 12
expr <expr> (27)
    on left: 15 16 17 18, on right: 13 14 15 16
type <type> (28)
    on left: 19, on right: 6 11


State 0

    0 $accept: . program $end

    ID  shift, and go to state 1

    program                  go to state 2
    top_level_block          go to state 3
    top_level_block_element  go to state 4
    declaration              go to state 5
    function                 go to state 6
    type                     go to state 7


State 1

   19 type: ID .

    $default  reduce using rule 19 (type)


State 2

    0 $accept: program . $end

    $end  shift, and go to state 8


State 3

    1 program: top_level_block .
    3 top_level_block: top_level_block . top_level_block_element

    ID  shift, and go to state 1

    $default  reduce using rule 1 (program)

    top_level_block_element  go to state 9
    declaration              go to state 5
    function                 go to state 6
    type                     go to state 7


State 4

    2 top_level_block: top_level_block_element .

    $default  reduce using rule 2 (top_level_block)


State 5

    4 top_level_block_element: declaration .

    $default  reduce using rule 4 (top_level_block_element)


State 6

    5 top_level_block_element: function .

    $default  reduce using rule 5 (top_level_block_element)


State 7

    6 declaration: type . ID SEMI
   11 function: type . ID LPAREN RPAREN LBRACE block RBRACE

    ID  shift, and go to state 10


State 8

    0 $accept: program $end .

    $default  accept


State 9

    3 top_level_block: top_level_block top_level_block_element .

    $default  reduce using rule 3 (top_level_block)


State 10

    6 declaration: type ID . SEMI
   11 function: type ID . LPAREN RPAREN LBRACE block RBRACE

    SEMI    shift, and go to state 11
    LPAREN  shift, and go to state 12


State 11

    6 declaration: type ID SEMI .

    $default  reduce using rule 6 (declaration)


State 12

   11 function: type ID LPAREN . RPAREN LBRACE block RBRACE

    RPAREN  shift, and go to state 13


State 13

   11 function: type ID LPAREN RPAREN . LBRACE block RBRACE

    LBRACE  shift, and go to state 14


State 14

   11 function: type ID LPAREN RPAREN LBRACE . block RBRACE

    ID      shift, and go to state 15
    RETURN  shift, and go to state 16

    declaration    go to state 17
    block          go to state 18
    block_element  go to state 19
    statement      go to state 20
    assignment     go to state 21
    type           go to state 22


State 15

   14 assignment: ID . EQUALS expr
   19 type: ID .

    EQUALS  shift, and go to state 23

    $default  reduce using rule 19 (type)


State 16

   13 statement: RETURN . expr SEMI

    ID       shift, and go to state 24
    INTEGER  shift, and go to state 25

    expr  go to state 26


State 17

    9 block_element: declaration .

    $default  reduce using rule 9 (block_element)


State 18

    7 block: block . block_element
   11 function: type ID LPAREN RPAREN LBRACE block . RBRACE

    ID      shift, and go to state 15
    RBRACE  shift, and go to state 27
    RETURN  shift, and go to state 16

    declaration    go to state 17
    block_element  go to state 28
    statement      go to state 20
    assignment     go to state 21
    type           go to state 22


State 19

    8 block: block_element .

    $default  reduce using rule 8 (block)


State 20

   10 block_element: statement .

    $default  reduce using rule 10 (block_element)


State 21

   12 statement: assignment . SEMI

    SEMI  shift, and go to state 29


State 22

    6 declaration: type . ID SEMI

    ID  shift, and go to state 30


State 23

   14 assignment: ID EQUALS . expr

    ID       shift, and go to state 24
    INTEGER  shift, and go to state 25

    expr  go to state 31


State 24

   17 expr: ID .

    $default  reduce using rule 17 (expr)


State 25

   18 expr: INTEGER .

    $default  reduce using rule 18 (expr)


State 26

   13 statement: RETURN expr . SEMI
   15 expr: expr . BINOP expr
   16     | expr . RELOP expr

    RELOP  shift, and go to state 32
    BINOP  shift, and go to state 33
    SEMI   shift, and go to state 34


State 27

   11 function: type ID LPAREN RPAREN LBRACE block RBRACE .

    $default  reduce using rule 11 (function)


State 28

    7 block: block block_element .

    $default  reduce using rule 7 (block)


State 29

   12 statement: assignment SEMI .

    $default  reduce using rule 12 (statement)


State 30

    6 declaration: type ID . SEMI

    SEMI  shift, and go to state 11


State 31

   14 assignment: ID EQUALS expr .
   15 expr: expr . BINOP expr
   16     | expr . RELOP expr

    RELOP  shift, and go to state 32
    BINOP  shift, and go to state 33

    $default  reduce using rule 14 (assignment)


State 32

   16 expr: expr RELOP . expr

    ID       shift, and go to state 24
    INTEGER  shift, and go to state 25

    expr  go to state 35


State 33

   15 expr: expr BINOP . expr

    ID       shift, and go to state 24
    INTEGER  shift, and go to state 25

    expr  go to state 36


State 34

   13 statement: RETURN expr SEMI .

    $default  reduce using rule 13 (statement)


State 35

   15 expr: expr . BINOP expr
   16     | expr . RELOP expr
   16     | expr RELOP expr .

    BINOP  shift, and go to state 33

    $default  reduce using rule 16 (expr)


State 36

   15 expr: expr . BINOP expr
   15     | expr BINOP expr .
   16     | expr . RELOP expr

    $default  reduce using rule 15 (expr)
