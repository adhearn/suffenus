Terminals unused in grammar

   UNOP
   BINOP
   NEWLINE


State 80 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: top_level_block

    2 top_level_block: top_level_block_element
    3                | top_level_block top_level_block_element

    4 top_level_block_element: declaration
    5                        | function

    6 declaration: declaration_specifier ';'

    7 declaration_specifier: type ID

    8 declaration_specifier_list: declaration_specifier
    9                           | declaration_specifier_list ',' declaration_specifier

   10 block: block block_element
   11      | block_element

   12 block_element: declaration
   13              | statement

   14 function: type ID '(' ')' '{' block '}'
   15         | type ID '(' declaration_specifier_list ')' '{' block '}'

   16 statement: compound_statement
   17          | expr_statement
   18          | jump_statement
   19          | selection_statement

   20 compound_statement: '{' block '}'

   21 expr_statement: expr ';'

   22 jump_statement: RETURN expr ';'

   23 selection_statement: IF '(' expr ')' statement
   24                    | IF '(' expr ')' statement ELSE statement

   25 primary_expr: ID
   26             | INTEGER

   27 argument_expr_list: assignment_expr
   28                   | argument_expr_list ',' assignment_expr

   29 postfix_expr: primary_expr
   30             | postfix_expr '(' ')'
   31             | postfix_expr '(' argument_expr_list ')'

   32 unary_expr: postfix_expr

   33 multiplicative_expr: unary_expr
   34                    | multiplicative_expr '*' unary_expr
   35                    | multiplicative_expr '/' unary_expr

   36 additive_expr: multiplicative_expr
   37              | additive_expr '+' multiplicative_expr
   38              | additive_expr '-' multiplicative_expr

   39 relational_expr: additive_expr
   40                | relational_expr RELOP additive_expr

   41 equality_expr: relational_expr
   42              | equality_expr EQOP relational_expr

   43 assignment_expr: equality_expr
   44                | ID '=' assignment_expr

   45 expr: assignment_expr

   46 type: ID


Terminals, with rules where they appear

$end (0) 0
'(' (40) 14 15 23 24 30 31
')' (41) 14 15 23 24 30 31
'*' (42) 34
'+' (43) 37
',' (44) 9 28
'-' (45) 38
'/' (47) 35
';' (59) 6 21 22
'=' (61) 44
'{' (123) 14 15 20
'}' (125) 14 15 20
error (256)
RELOP <op> (258) 40
UNOP <op> (259)
BINOP <op> (260)
EQOP <op> (261) 42
ID <str> (262) 7 14 15 25 44 46
INTEGER <integer> (263) 26
NEWLINE (264)
RETURN (265) 22
IF (266) 23 24
ELSE (267) 24


Nonterminals, with rules where they appear

$accept (24)
    on left: 0
program <program> (25)
    on left: 1, on right: 0
top_level_block <block> (26)
    on left: 2 3, on right: 1 3
top_level_block_element <block_element> (27)
    on left: 4 5, on right: 2 3
declaration <declaration> (28)
    on left: 6, on right: 4 12
declaration_specifier <declaration> (29)
    on left: 7, on right: 6 8 9
declaration_specifier_list <list> (30)
    on left: 8 9, on right: 9 15
block <block> (31)
    on left: 10 11, on right: 10 14 15 20
block_element <block_element> (32)
    on left: 12 13, on right: 10 11
function <function> (33)
    on left: 14 15, on right: 5
statement <statement> (34)
    on left: 16 17 18 19, on right: 13 23 24
compound_statement <block> (35)
    on left: 20, on right: 16
expr_statement <expr> (36)
    on left: 21, on right: 17
jump_statement <jump> (37)
    on left: 22, on right: 18
selection_statement <selection> (38)
    on left: 23 24, on right: 19
primary_expr <expr> (39)
    on left: 25 26, on right: 29
argument_expr_list <list> (40)
    on left: 27 28, on right: 28 31
postfix_expr <expr> (41)
    on left: 29 30 31, on right: 30 31 32
unary_expr <expr> (42)
    on left: 32, on right: 33 34 35
multiplicative_expr <expr> (43)
    on left: 33 34 35, on right: 34 35 36 37 38
additive_expr <expr> (44)
    on left: 36 37 38, on right: 37 38 39 40
relational_expr <expr> (45)
    on left: 39 40, on right: 40 41 42
equality_expr <expr> (46)
    on left: 41 42, on right: 42 43
assignment_expr <expr> (47)
    on left: 43 44, on right: 27 28 44 45
expr <expr> (48)
    on left: 45, on right: 21 22 23 24
type <type> (49)
    on left: 46, on right: 7 14 15


State 0

    0 $accept: . program $end

    ID  shift, and go to state 1

    program                  go to state 2
    top_level_block          go to state 3
    top_level_block_element  go to state 4
    declaration              go to state 5
    declaration_specifier    go to state 6
    function                 go to state 7
    type                     go to state 8


State 1

   46 type: ID .

    $default  reduce using rule 46 (type)


State 2

    0 $accept: program . $end

    $end  shift, and go to state 9


State 3

    1 program: top_level_block .
    3 top_level_block: top_level_block . top_level_block_element

    ID  shift, and go to state 1

    $default  reduce using rule 1 (program)

    top_level_block_element  go to state 10
    declaration              go to state 5
    declaration_specifier    go to state 6
    function                 go to state 7
    type                     go to state 8


State 4

    2 top_level_block: top_level_block_element .

    $default  reduce using rule 2 (top_level_block)


State 5

    4 top_level_block_element: declaration .

    $default  reduce using rule 4 (top_level_block_element)


State 6

    6 declaration: declaration_specifier . ';'

    ';'  shift, and go to state 11


State 7

    5 top_level_block_element: function .

    $default  reduce using rule 5 (top_level_block_element)


State 8

    7 declaration_specifier: type . ID
   14 function: type . ID '(' ')' '{' block '}'
   15         | type . ID '(' declaration_specifier_list ')' '{' block '}'

    ID  shift, and go to state 12


State 9

    0 $accept: program $end .

    $default  accept


State 10

    3 top_level_block: top_level_block top_level_block_element .

    $default  reduce using rule 3 (top_level_block)


State 11

    6 declaration: declaration_specifier ';' .

    $default  reduce using rule 6 (declaration)


State 12

    7 declaration_specifier: type ID .
   14 function: type ID . '(' ')' '{' block '}'
   15         | type ID . '(' declaration_specifier_list ')' '{' block '}'

    '('  shift, and go to state 13

    $default  reduce using rule 7 (declaration_specifier)


State 13

   14 function: type ID '(' . ')' '{' block '}'
   15         | type ID '(' . declaration_specifier_list ')' '{' block '}'

    ID   shift, and go to state 1
    ')'  shift, and go to state 14

    declaration_specifier       go to state 15
    declaration_specifier_list  go to state 16
    type                        go to state 17


State 14

   14 function: type ID '(' ')' . '{' block '}'

    '{'  shift, and go to state 18


State 15

    8 declaration_specifier_list: declaration_specifier .

    $default  reduce using rule 8 (declaration_specifier_list)


State 16

    9 declaration_specifier_list: declaration_specifier_list . ',' declaration_specifier
   15 function: type ID '(' declaration_specifier_list . ')' '{' block '}'

    ','  shift, and go to state 19
    ')'  shift, and go to state 20


State 17

    7 declaration_specifier: type . ID

    ID  shift, and go to state 21


State 18

   14 function: type ID '(' ')' '{' . block '}'

    ID       shift, and go to state 22
    INTEGER  shift, and go to state 23
    RETURN   shift, and go to state 24
    IF       shift, and go to state 25
    '{'      shift, and go to state 26

    declaration            go to state 27
    declaration_specifier  go to state 6
    block                  go to state 28
    block_element          go to state 29
    statement              go to state 30
    compound_statement     go to state 31
    expr_statement         go to state 32
    jump_statement         go to state 33
    selection_statement    go to state 34
    primary_expr           go to state 35
    postfix_expr           go to state 36
    unary_expr             go to state 37
    multiplicative_expr    go to state 38
    additive_expr          go to state 39
    relational_expr        go to state 40
    equality_expr          go to state 41
    assignment_expr        go to state 42
    expr                   go to state 43
    type                   go to state 17


State 19

    9 declaration_specifier_list: declaration_specifier_list ',' . declaration_specifier

    ID  shift, and go to state 1

    declaration_specifier  go to state 44
    type                   go to state 17


State 20

   15 function: type ID '(' declaration_specifier_list ')' . '{' block '}'

    '{'  shift, and go to state 45


State 21

    7 declaration_specifier: type ID .

    $default  reduce using rule 7 (declaration_specifier)


State 22

   25 primary_expr: ID .
   44 assignment_expr: ID . '=' assignment_expr
   46 type: ID .

    '='  shift, and go to state 46

    ID        reduce using rule 46 (type)
    $default  reduce using rule 25 (primary_expr)


State 23

   26 primary_expr: INTEGER .

    $default  reduce using rule 26 (primary_expr)


State 24

   22 jump_statement: RETURN . expr ';'

    ID       shift, and go to state 47
    INTEGER  shift, and go to state 23

    primary_expr         go to state 35
    postfix_expr         go to state 36
    unary_expr           go to state 37
    multiplicative_expr  go to state 38
    additive_expr        go to state 39
    relational_expr      go to state 40
    equality_expr        go to state 41
    assignment_expr      go to state 42
    expr                 go to state 48


State 25

   23 selection_statement: IF . '(' expr ')' statement
   24                    | IF . '(' expr ')' statement ELSE statement

    '('  shift, and go to state 49


State 26

   20 compound_statement: '{' . block '}'

    ID       shift, and go to state 22
    INTEGER  shift, and go to state 23
    RETURN   shift, and go to state 24
    IF       shift, and go to state 25
    '{'      shift, and go to state 26

    declaration            go to state 27
    declaration_specifier  go to state 6
    block                  go to state 50
    block_element          go to state 29
    statement              go to state 30
    compound_statement     go to state 31
    expr_statement         go to state 32
    jump_statement         go to state 33
    selection_statement    go to state 34
    primary_expr           go to state 35
    postfix_expr           go to state 36
    unary_expr             go to state 37
    multiplicative_expr    go to state 38
    additive_expr          go to state 39
    relational_expr        go to state 40
    equality_expr          go to state 41
    assignment_expr        go to state 42
    expr                   go to state 43
    type                   go to state 17


State 27

   12 block_element: declaration .

    $default  reduce using rule 12 (block_element)


State 28

   10 block: block . block_element
   14 function: type ID '(' ')' '{' block . '}'

    ID       shift, and go to state 22
    INTEGER  shift, and go to state 23
    RETURN   shift, and go to state 24
    IF       shift, and go to state 25
    '{'      shift, and go to state 26
    '}'      shift, and go to state 51

    declaration            go to state 27
    declaration_specifier  go to state 6
    block_element          go to state 52
    statement              go to state 30
    compound_statement     go to state 31
    expr_statement         go to state 32
    jump_statement         go to state 33
    selection_statement    go to state 34
    primary_expr           go to state 35
    postfix_expr           go to state 36
    unary_expr             go to state 37
    multiplicative_expr    go to state 38
    additive_expr          go to state 39
    relational_expr        go to state 40
    equality_expr          go to state 41
    assignment_expr        go to state 42
    expr                   go to state 43
    type                   go to state 17


State 29

   11 block: block_element .

    $default  reduce using rule 11 (block)


State 30

   13 block_element: statement .

    $default  reduce using rule 13 (block_element)


State 31

   16 statement: compound_statement .

    $default  reduce using rule 16 (statement)


State 32

   17 statement: expr_statement .

    $default  reduce using rule 17 (statement)


State 33

   18 statement: jump_statement .

    $default  reduce using rule 18 (statement)


State 34

   19 statement: selection_statement .

    $default  reduce using rule 19 (statement)


State 35

   29 postfix_expr: primary_expr .

    $default  reduce using rule 29 (postfix_expr)


State 36

   30 postfix_expr: postfix_expr . '(' ')'
   31             | postfix_expr . '(' argument_expr_list ')'
   32 unary_expr: postfix_expr .

    '('  shift, and go to state 53

    $default  reduce using rule 32 (unary_expr)


State 37

   33 multiplicative_expr: unary_expr .

    $default  reduce using rule 33 (multiplicative_expr)


State 38

   34 multiplicative_expr: multiplicative_expr . '*' unary_expr
   35                    | multiplicative_expr . '/' unary_expr
   36 additive_expr: multiplicative_expr .

    '*'  shift, and go to state 54
    '/'  shift, and go to state 55

    $default  reduce using rule 36 (additive_expr)


State 39

   37 additive_expr: additive_expr . '+' multiplicative_expr
   38              | additive_expr . '-' multiplicative_expr
   39 relational_expr: additive_expr .

    '+'  shift, and go to state 56
    '-'  shift, and go to state 57

    $default  reduce using rule 39 (relational_expr)


State 40

   40 relational_expr: relational_expr . RELOP additive_expr
   41 equality_expr: relational_expr .

    RELOP  shift, and go to state 58

    $default  reduce using rule 41 (equality_expr)


State 41

   42 equality_expr: equality_expr . EQOP relational_expr
   43 assignment_expr: equality_expr .

    EQOP  shift, and go to state 59

    $default  reduce using rule 43 (assignment_expr)


State 42

   45 expr: assignment_expr .

    $default  reduce using rule 45 (expr)


State 43

   21 expr_statement: expr . ';'

    ';'  shift, and go to state 60


State 44

    9 declaration_specifier_list: declaration_specifier_list ',' declaration_specifier .

    $default  reduce using rule 9 (declaration_specifier_list)


State 45

   15 function: type ID '(' declaration_specifier_list ')' '{' . block '}'

    ID       shift, and go to state 22
    INTEGER  shift, and go to state 23
    RETURN   shift, and go to state 24
    IF       shift, and go to state 25
    '{'      shift, and go to state 26

    declaration            go to state 27
    declaration_specifier  go to state 6
    block                  go to state 61
    block_element          go to state 29
    statement              go to state 30
    compound_statement     go to state 31
    expr_statement         go to state 32
    jump_statement         go to state 33
    selection_statement    go to state 34
    primary_expr           go to state 35
    postfix_expr           go to state 36
    unary_expr             go to state 37
    multiplicative_expr    go to state 38
    additive_expr          go to state 39
    relational_expr        go to state 40
    equality_expr          go to state 41
    assignment_expr        go to state 42
    expr                   go to state 43
    type                   go to state 17


State 46

   44 assignment_expr: ID '=' . assignment_expr

    ID       shift, and go to state 47
    INTEGER  shift, and go to state 23

    primary_expr         go to state 35
    postfix_expr         go to state 36
    unary_expr           go to state 37
    multiplicative_expr  go to state 38
    additive_expr        go to state 39
    relational_expr      go to state 40
    equality_expr        go to state 41
    assignment_expr      go to state 62


State 47

   25 primary_expr: ID .
   44 assignment_expr: ID . '=' assignment_expr

    '='  shift, and go to state 46

    $default  reduce using rule 25 (primary_expr)


State 48

   22 jump_statement: RETURN expr . ';'

    ';'  shift, and go to state 63


State 49

   23 selection_statement: IF '(' . expr ')' statement
   24                    | IF '(' . expr ')' statement ELSE statement

    ID       shift, and go to state 47
    INTEGER  shift, and go to state 23

    primary_expr         go to state 35
    postfix_expr         go to state 36
    unary_expr           go to state 37
    multiplicative_expr  go to state 38
    additive_expr        go to state 39
    relational_expr      go to state 40
    equality_expr        go to state 41
    assignment_expr      go to state 42
    expr                 go to state 64


State 50

   10 block: block . block_element
   20 compound_statement: '{' block . '}'

    ID       shift, and go to state 22
    INTEGER  shift, and go to state 23
    RETURN   shift, and go to state 24
    IF       shift, and go to state 25
    '{'      shift, and go to state 26
    '}'      shift, and go to state 65

    declaration            go to state 27
    declaration_specifier  go to state 6
    block_element          go to state 52
    statement              go to state 30
    compound_statement     go to state 31
    expr_statement         go to state 32
    jump_statement         go to state 33
    selection_statement    go to state 34
    primary_expr           go to state 35
    postfix_expr           go to state 36
    unary_expr             go to state 37
    multiplicative_expr    go to state 38
    additive_expr          go to state 39
    relational_expr        go to state 40
    equality_expr          go to state 41
    assignment_expr        go to state 42
    expr                   go to state 43
    type                   go to state 17


State 51

   14 function: type ID '(' ')' '{' block '}' .

    $default  reduce using rule 14 (function)


State 52

   10 block: block block_element .

    $default  reduce using rule 10 (block)


State 53

   30 postfix_expr: postfix_expr '(' . ')'
   31             | postfix_expr '(' . argument_expr_list ')'

    ID       shift, and go to state 47
    INTEGER  shift, and go to state 23
    ')'      shift, and go to state 66

    primary_expr         go to state 35
    argument_expr_list   go to state 67
    postfix_expr         go to state 36
    unary_expr           go to state 37
    multiplicative_expr  go to state 38
    additive_expr        go to state 39
    relational_expr      go to state 40
    equality_expr        go to state 41
    assignment_expr      go to state 68


State 54

   34 multiplicative_expr: multiplicative_expr '*' . unary_expr

    ID       shift, and go to state 69
    INTEGER  shift, and go to state 23

    primary_expr  go to state 35
    postfix_expr  go to state 36
    unary_expr    go to state 70


State 55

   35 multiplicative_expr: multiplicative_expr '/' . unary_expr

    ID       shift, and go to state 69
    INTEGER  shift, and go to state 23

    primary_expr  go to state 35
    postfix_expr  go to state 36
    unary_expr    go to state 71


State 56

   37 additive_expr: additive_expr '+' . multiplicative_expr

    ID       shift, and go to state 69
    INTEGER  shift, and go to state 23

    primary_expr         go to state 35
    postfix_expr         go to state 36
    unary_expr           go to state 37
    multiplicative_expr  go to state 72


State 57

   38 additive_expr: additive_expr '-' . multiplicative_expr

    ID       shift, and go to state 69
    INTEGER  shift, and go to state 23

    primary_expr         go to state 35
    postfix_expr         go to state 36
    unary_expr           go to state 37
    multiplicative_expr  go to state 73


State 58

   40 relational_expr: relational_expr RELOP . additive_expr

    ID       shift, and go to state 69
    INTEGER  shift, and go to state 23

    primary_expr         go to state 35
    postfix_expr         go to state 36
    unary_expr           go to state 37
    multiplicative_expr  go to state 38
    additive_expr        go to state 74


State 59

   42 equality_expr: equality_expr EQOP . relational_expr

    ID       shift, and go to state 69
    INTEGER  shift, and go to state 23

    primary_expr         go to state 35
    postfix_expr         go to state 36
    unary_expr           go to state 37
    multiplicative_expr  go to state 38
    additive_expr        go to state 39
    relational_expr      go to state 75


State 60

   21 expr_statement: expr ';' .

    $default  reduce using rule 21 (expr_statement)


State 61

   10 block: block . block_element
   15 function: type ID '(' declaration_specifier_list ')' '{' block . '}'

    ID       shift, and go to state 22
    INTEGER  shift, and go to state 23
    RETURN   shift, and go to state 24
    IF       shift, and go to state 25
    '{'      shift, and go to state 26
    '}'      shift, and go to state 76

    declaration            go to state 27
    declaration_specifier  go to state 6
    block_element          go to state 52
    statement              go to state 30
    compound_statement     go to state 31
    expr_statement         go to state 32
    jump_statement         go to state 33
    selection_statement    go to state 34
    primary_expr           go to state 35
    postfix_expr           go to state 36
    unary_expr             go to state 37
    multiplicative_expr    go to state 38
    additive_expr          go to state 39
    relational_expr        go to state 40
    equality_expr          go to state 41
    assignment_expr        go to state 42
    expr                   go to state 43
    type                   go to state 17


State 62

   44 assignment_expr: ID '=' assignment_expr .

    $default  reduce using rule 44 (assignment_expr)


State 63

   22 jump_statement: RETURN expr ';' .

    $default  reduce using rule 22 (jump_statement)


State 64

   23 selection_statement: IF '(' expr . ')' statement
   24                    | IF '(' expr . ')' statement ELSE statement

    ')'  shift, and go to state 77


State 65

   20 compound_statement: '{' block '}' .

    $default  reduce using rule 20 (compound_statement)


State 66

   30 postfix_expr: postfix_expr '(' ')' .

    $default  reduce using rule 30 (postfix_expr)


State 67

   28 argument_expr_list: argument_expr_list . ',' assignment_expr
   31 postfix_expr: postfix_expr '(' argument_expr_list . ')'

    ','  shift, and go to state 78
    ')'  shift, and go to state 79


State 68

   27 argument_expr_list: assignment_expr .

    $default  reduce using rule 27 (argument_expr_list)


State 69

   25 primary_expr: ID .

    $default  reduce using rule 25 (primary_expr)


State 70

   34 multiplicative_expr: multiplicative_expr '*' unary_expr .

    $default  reduce using rule 34 (multiplicative_expr)


State 71

   35 multiplicative_expr: multiplicative_expr '/' unary_expr .

    $default  reduce using rule 35 (multiplicative_expr)


State 72

   34 multiplicative_expr: multiplicative_expr . '*' unary_expr
   35                    | multiplicative_expr . '/' unary_expr
   37 additive_expr: additive_expr '+' multiplicative_expr .

    '*'  shift, and go to state 54
    '/'  shift, and go to state 55

    $default  reduce using rule 37 (additive_expr)


State 73

   34 multiplicative_expr: multiplicative_expr . '*' unary_expr
   35                    | multiplicative_expr . '/' unary_expr
   38 additive_expr: additive_expr '-' multiplicative_expr .

    '*'  shift, and go to state 54
    '/'  shift, and go to state 55

    $default  reduce using rule 38 (additive_expr)


State 74

   37 additive_expr: additive_expr . '+' multiplicative_expr
   38              | additive_expr . '-' multiplicative_expr
   40 relational_expr: relational_expr RELOP additive_expr .

    '+'  shift, and go to state 56
    '-'  shift, and go to state 57

    $default  reduce using rule 40 (relational_expr)


State 75

   40 relational_expr: relational_expr . RELOP additive_expr
   42 equality_expr: equality_expr EQOP relational_expr .

    RELOP  shift, and go to state 58

    $default  reduce using rule 42 (equality_expr)


State 76

   15 function: type ID '(' declaration_specifier_list ')' '{' block '}' .

    $default  reduce using rule 15 (function)


State 77

   23 selection_statement: IF '(' expr ')' . statement
   24                    | IF '(' expr ')' . statement ELSE statement

    ID       shift, and go to state 47
    INTEGER  shift, and go to state 23
    RETURN   shift, and go to state 24
    IF       shift, and go to state 25
    '{'      shift, and go to state 26

    statement            go to state 80
    compound_statement   go to state 31
    expr_statement       go to state 32
    jump_statement       go to state 33
    selection_statement  go to state 34
    primary_expr         go to state 35
    postfix_expr         go to state 36
    unary_expr           go to state 37
    multiplicative_expr  go to state 38
    additive_expr        go to state 39
    relational_expr      go to state 40
    equality_expr        go to state 41
    assignment_expr      go to state 42
    expr                 go to state 43


State 78

   28 argument_expr_list: argument_expr_list ',' . assignment_expr

    ID       shift, and go to state 47
    INTEGER  shift, and go to state 23

    primary_expr         go to state 35
    postfix_expr         go to state 36
    unary_expr           go to state 37
    multiplicative_expr  go to state 38
    additive_expr        go to state 39
    relational_expr      go to state 40
    equality_expr        go to state 41
    assignment_expr      go to state 81


State 79

   31 postfix_expr: postfix_expr '(' argument_expr_list ')' .

    $default  reduce using rule 31 (postfix_expr)


State 80

   23 selection_statement: IF '(' expr ')' statement .
   24                    | IF '(' expr ')' statement . ELSE statement

    ELSE  shift, and go to state 82

    ELSE      [reduce using rule 23 (selection_statement)]
    $default  reduce using rule 23 (selection_statement)


State 81

   28 argument_expr_list: argument_expr_list ',' assignment_expr .

    $default  reduce using rule 28 (argument_expr_list)


State 82

   24 selection_statement: IF '(' expr ')' statement ELSE . statement

    ID       shift, and go to state 47
    INTEGER  shift, and go to state 23
    RETURN   shift, and go to state 24
    IF       shift, and go to state 25
    '{'      shift, and go to state 26

    statement            go to state 83
    compound_statement   go to state 31
    expr_statement       go to state 32
    jump_statement       go to state 33
    selection_statement  go to state 34
    primary_expr         go to state 35
    postfix_expr         go to state 36
    unary_expr           go to state 37
    multiplicative_expr  go to state 38
    additive_expr        go to state 39
    relational_expr      go to state 40
    equality_expr        go to state 41
    assignment_expr      go to state 42
    expr                 go to state 43


State 83

   24 selection_statement: IF '(' expr ')' statement ELSE statement .

    $default  reduce using rule 24 (selection_statement)
